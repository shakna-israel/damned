#!/bin/sh

damned_WIDTH=$(tput cols)
damned_HEIGHT=$(tput lines)
damned_CURSOR_HEIGHT=0 # Initialised elsewhere.
damned_CURSOR_WIDTH=0 # Initialised elsewhere.
damned_OLD_TTY=$(stty -g) # Store for restorations. Do NOT modify.

# TODO: Reduce number of functions. Use arguments instead.
# reduce to maybe even one exposed? That'd make macro-style expansion possible.
# e.g. damned echo disable

disable_echo() {
  stty -echo
}

enable_echo() {
  stty echo
}

term() {
  case "$1" in
    uncook) stty raw; break;;
    restore) stty $damned_OLD_TTY; break;;
  esac
  #TODO: Error checking
}

getch() {
  # Read a single byte
  read -n 1 result
  # Convert the given byte into an ordinal.
  printf '%d' "'$result"
}

get_cursor_position() {
  exec < /dev/tty
  oldstty=$(stty -g)
  stty raw -echo min 0
  tput u7 > /dev/tty

  # Yeah. Really.
  # Apparently `read` can run before output is given.
  # 200ms was the smallest value I could find that would consistently work.
  sleep 0.2

  IFS=';' read -r row col
  stty $oldstty

  damned_CURSOR_HEIGHT=$(expr $(expr substr $row 3 "$damned_WIDTH") - 1)
  damned_CURSOR_WIDTH=$(expr ${col%R} - 1)
}

cursor() {
  case "$1" in
    up) printf "\033[$2A"; break;;
    down) printf "\033[$2B"; break;;
    left) printf "\033[$2C"; break;;
    right) printf "\033[$2D"; break;;
    save) printf '\033[s'; break;;
    restore) printf '\033[u'; break;;
  esac
  #TODO: Error on invalid choice?
}

line_clear() {
  if [ -z "$1" ]; then
    printf '\033[2K'
  elif [ "$1" = 'before' ]; then
    printf '\033[1K'
  elif [ "$1" = 'after' ]; then
    printf '\033[0K'
  else
    #TODO: Raise an exception? Maybe?
    :
  fi
}

screen_clear() {
  if [ -z "$1" ]; then
    printf '\033[2J'
  elif [ "$1" = 'before' ]; then
    printf '\033[1J'
  elif [ "$1" = 'after' ]; then
    printf '\033[0J'
  else
    #TODO: Raise an exception? Maybe?
    :
  fi
}

# TODO: cursor_goto
# Combine:
# * Get current position
# * Move cursor up/down n lines
# * Move cursor to column n
# * bc for math

colors() {
  case "$1" in
    # Decorations. Only sorta colors, but it makes sense.
    bold) printf '\033[1m'; break;;
    underline) printf '\033[4m'; break;;
    reverse) printf '\033[7m'; break;;
    blink) printf '\033[5m'; break;;
    invisible) printf '\033[8m'; break;;
    # Colors with differing behaviours
    256) printf "\033[38;5;$2m"; break;;
    true) printf "\033[38;2;$2;$3;$4m"; break;;
    # Actual colors.
    black) printf '\033[30m'; break;;
    red) printf '\033[31m'; break;;
    green) printf '\033[32m'; break;;
    yellow) printf '\033[33m'; break;;
    blue) printf '\033[34m'; break;;
    magenta) printf '\033[35m'; break;;
    cyan) printf '\033[36m'; break;;
    white) printf '\033[37m'; break;;
    bright-black) printf '\033[30;1m'; break;;
    bright-red) printf '\033[31;1m'; break;;
    bright-green) printf '\033[32;1m'; break;;
    bright-yellow) printf '\033[33;1m'; break;;
    bright-blue) printf '\033[34;1m'; break;;
    bright-magenta) printf '\033[35;1m'; break;;
    bright-cyan) printf '\033[36;1m'; break;;
    bright-white) printf '\033[37;1m'; break;;
    reset) printf '\033[m'; break;;
  esac
  #TODO: maybe error on invalid input.
}

colors_bg() {
  case "$1" in
    # colors with differing behaviours
    256) printf "\033[48;5;$2m"; break;;
    true) printf "\033[48;2;$2;$3;$4m"; break;;
    # normal colors
    black) printf '\033[40m'; break;;
    red) printf '\033[41m'; break;;
    green) printf '\033[42m'; break;;
    yellow) printf '\033[43m'; break;;
    blue) printf '\033[44m'; break;;
    magenta) printf '\033[45m'; break;;
    cyan) printf '\033[46m'; break;;
    white) printf '\033[47m'; break;;
    bright-black) printf '\033[40;1m'; break;;
    bright-red) printf '\033[41;1m'; break;;
    bright-green) printf '\033[42;1m'; break;;
    bright-yellow) printf '\033[43;1m'; break;;
    bright-blue) printf '\033[44;1m'; break;;
    bright-magenta) printf '\033[45;1m'; break;;
    bright-cyan) printf '\033[46;1m'; break;;
    bright-white) printf '\033[47;1m'; break;;
  esac
  #TODO: maybe error on invalid input.
}

trap 'window_size' WINCH
window_size() {
  damned_WIDTH=$(tput cols)
  damned_HEIGHT=$(tput lines)
  # `get_cursor_position` can be costly to run.
  get_cursor_position
}

trap 'cleanup' EXIT
cleanup() {
  stty $damned_OLD_TTY
  colors reset
}

# This needs to run at least once!
# And yes, it takes forever to run.
get_cursor_position
